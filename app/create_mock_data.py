from app.database import SessionLocal, engine
from app.models.hotels import Hotel, Room, User, Booking
from app.database import Base
from datetime import datetime, timedelta
import random

def create_mock_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    Base.metadata.create_all(bind=engine)
    
    db = SessionLocal()
    
    try:
        hotels_data = [
            {
                "name": "Grand Hotel Moscow",
                "description": "–†–æ—Å–∫–æ—à–Ω—ã–π –ø—è—Ç–∏–∑–≤–µ–∑–¥–æ—á–Ω—ã–π –æ—Ç–µ–ª—å –≤ —Å–∞–º–æ–º —Ü–µ–Ω—Ç—Ä–µ –ú–æ—Å–∫–≤—ã",
                "address": "—É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 1",
                "city": "–ú–æ—Å–∫–≤–∞",
                "country": "–†–æ—Å—Å–∏—è",
                "rating": 4.8
            },
            {
                "name": "St. Petersburg Imperial",
                "description": "–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –æ—Ç–µ–ª—å —Å –≤–∏–¥–æ–º –Ω–∞ –ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç",
                "address": "–ù–µ–≤—Å–∫–∏–π –ø—Ä-—Ç, 25",
                "city": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", 
                "country": "–†–æ—Å—Å–∏—è",
                "rating": 4.6
            },
            {
                "name": "Sochi Sunrise Resort",
                "description": "–ö—É—Ä–æ—Ä—Ç–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –ø–ª—è–∂–µ–º –∏ SPA",
                "address": "—É–ª. –ü—Ä–∏–º–æ—Ä—Å–∫–∞—è, 45",
                "city": "–°–æ—á–∏",
                "country": "–†–æ—Å—Å–∏—è", 
                "rating": 4.4
            },
            {
                "name": "Kazan Palace",
                "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç–µ–ª—å –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º —Ü–µ–Ω—Ç—Ä–µ –ö–∞–∑–∞–Ω–∏",
                "address": "—É–ª. –ë–∞—É–º–∞–Ω–∞, 15",
                "city": "–ö–∞–∑–∞–Ω—å",
                "country": "–†–æ—Å—Å–∏—è",
                "rating": 4.5
            },
            {
                "name": "Novosibirsk Business Hotel",
                "description": "–û—Ç–µ–ª—å –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –ø–æ–µ–∑–¥–æ–∫ —Å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª–∞–º–∏",
                "address": "—É–ª. –õ–µ–Ω–∏–Ω–∞, 100",
                "city": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
                "country": "–†–æ—Å—Å–∏—è",
                "rating": 4.2
            },
            {
                "name": "Golden Ring Hotel",
                "description": "–£—é—Ç–Ω—ã–π –æ—Ç–µ–ª—å –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º –≥–æ—Ä–æ–¥–µ –ó–æ–ª–æ—Ç–æ–≥–æ –∫–æ–ª—å—Ü–∞",
                "address": "–°–æ–≤–µ—Ç—Å–∫–∞—è –ø–ª., 3",
                "city": "–Ø—Ä–æ—Å–ª–∞–≤–ª—å", 
                "country": "–†–æ—Å—Å–∏—è",
                "rating": 4.3
            }
        ]
        
        hotels = []
        for hotel_data in hotels_data:
            hotel = Hotel(**hotel_data)
            db.add(hotel)
            hotels.append(hotel)
        
        db.flush() 
        print(f"üè® –°–æ–∑–¥–∞–Ω–æ {len(hotels)} –æ—Ç–µ–ª–µ–π")
        
        room_types = ["Standard", "Deluxe", "Superior", "Family", "Suite", "Business"]
        room_descriptions = {
            "Standard": "–ö–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–æ–º–µ—Ä",
            "Deluxe": "–£–ª—É—á—à–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É–¥–æ–±—Å—Ç–≤–∞–º–∏", 
            "Superior": "–ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞",
            "Family": "–°–µ–º–µ–π–Ω—ã–π –Ω–æ–º–µ—Ä —Å –¥–≤—É–º—è –∫–æ–º–Ω–∞—Ç–∞–º–∏",
            "Suite": "–õ—é–∫—Å —Å –≥–æ—Å—Ç–∏–Ω–æ–π –∑–æ–Ω–æ–π",
            "Business": "–ù–æ–º–µ—Ä –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –ø–æ–µ–∑–¥–æ–∫ —Å —Ä–∞–±–æ—á–∏–º —Å—Ç–æ–ª–æ–º"
        }
        
        amenities_options = [
            "WiFi, TV, –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä",
            "WiFi, TV, –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä, –ú–∏–Ω–∏-–±–∞—Ä",
            "WiFi, TV, –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä, –ú–∏–Ω–∏-–±–∞—Ä, –°–µ–π—Ñ",
            "WiFi, TV, –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä, –ú–∏–Ω–∏-–±–∞—Ä, –°–µ–π—Ñ, –ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞",
            "WiFi, TV, –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä, –ú–∏–Ω–∏-–±–∞—Ä, –°–µ–π—Ñ, –ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞, –ì–∏–¥—Ä–æ–º–∞—Å—Å–∞–∂–Ω–∞—è –≤–∞–Ω–Ω–∞"
        ]
        
        room_statuses = ["available", "available", "available", "maintenance", "cleaning"]
        
        rooms = []
        for hotel in hotels:
            num_rooms = random.randint(10, 15)
            for i in range(num_rooms):
                room_type = random.choice(room_types)
                floor = random.randint(1, 5)
                room_number = f"{floor}{str(i+1).zfill(2)}"
                
                base_price = 2000
                if room_type == "Deluxe":
                    base_price = 3500
                elif room_type == "Superior":
                    base_price = 4500
                elif room_type == "Family":
                    base_price = 5000
                elif room_type == "Suite":
                    base_price = 7000
                elif room_type == "Business":
                    base_price = 4000
                
                if hotel.city == "–ú–æ—Å–∫–≤–∞":
                    base_price *= 1.5
                elif hotel.city == "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥":
                    base_price *= 1.3
                
                room = Room(
                    hotel_id=hotel.id,
                    room_number=room_number,
                    floor=floor,
                    room_type=room_type,
                    description=room_descriptions[room_type],
                    price_per_night=base_price,
                    capacity=random.randint(1, 4),
                    amenities=random.choice(amenities_options),
                    status=random.choice(room_statuses)
                )
                db.add(room)
                rooms.append(room)
        
        print(f"üõèÔ∏è –°–æ–∑–¥–∞–Ω–æ {len(rooms)} –∫–æ–º–Ω–∞—Ç")
        
        users_data = [
            {
                "email": "ivan.petrov@example.com",
                "first_name": "–ò–≤–∞–Ω",
                "last_name": "–ü–µ—Ç—Ä–æ–≤",
                "phone": "+79991234567"
            },
            {
                "email": "maria.ivanova@example.com", 
                "first_name": "–ú–∞—Ä–∏—è",
                "last_name": "–ò–≤–∞–Ω–æ–≤–∞",
                "phone": "+79992345678"
            },
            {
                "email": "alex.smirnov@example.com",
                "first_name": "–ê–ª–µ–∫—Å–µ–π", 
                "last_name": "–°–º–∏—Ä–Ω–æ–≤",
                "phone": "+79993456789"
            },
            {
                "email": "olga.kuznetsova@example.com",
                "first_name": "–û–ª—å–≥–∞",
                "last_name": "–ö—É–∑–Ω–µ—Ü–æ–≤–∞", 
                "phone": "+79994567890"
            },
            {
                "email": "dmitry.popov@example.com",
                "first_name": "–î–º–∏—Ç—Ä–∏–π",
                "last_name": "–ü–æ–ø–æ–≤",
                "phone": "+79995678901"
            },
            {
                "email": "anna.sokolova@example.com",
                "first_name": "–ê–Ω–Ω–∞",
                "last_name": "–°–æ–∫–æ–ª–æ–≤–∞",
                "phone": "+79996789012"
            },
            {
                "email": "sergey.volkov@example.com", 
                "first_name": "–°–µ—Ä–≥–µ–π",
                "last_name": "–í–æ–ª–∫–æ–≤",
                "phone": "+79997890123"
            },
            {
                "email": "elena.romanova@example.com",
                "first_name": "–ï–ª–µ–Ω–∞", 
                "last_name": "–†–æ–º–∞–Ω–æ–≤–∞",
                "phone": "+79998901234"
            },
            {
                "email": "mikhail.fedorov@example.com",
                "first_name": "–ú–∏—Ö–∞–∏–ª",
                "last_name": "–§–µ–¥–æ—Ä–æ–≤",
                "phone": "+79999012345"
            },
            {
                "email": "natalia.morozova@example.com",
                "first_name": "–ù–∞—Ç–∞–ª—å—è",
                "last_name": "–ú–æ—Ä–æ–∑–æ–≤–∞", 
                "phone": "+79990123456"
            }
        ]
        
        users = []
        for user_data in users_data:
            user = User(**user_data)
            db.add(user)
            users.append(user)
        
        db.flush()
        print(f"üë• –°–æ–∑–¥–∞–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        booking_statuses = ["confirmed", "confirmed", "confirmed", "completed", "cancelled"]
        
        for i in range(20): 
            user = random.choice(users)
            room = random.choice([r for r in rooms if r.status == "available"])
        
            days_from_now = random.randint(1, 60)
            check_in = datetime.now() + timedelta(days=days_from_now)
            check_out = check_in + timedelta(days=random.randint(1, 7))
            
            nights = (check_out - check_in).days
            total_price = room.price_per_night * nights
            
            booking = Booking(
                user_id=user.id,
                hotel_id=room.hotel_id,
                room_id=room.id,
                check_in_date=check_in,
                check_out_date=check_out,
                number_of_guests=random.randint(1, room.capacity),
                total_price=total_price,
                status=random.choice(booking_statuses),
                special_requests=random.choice([
                    None,
                    "–ü–æ–∑–¥–Ω–∏–π –∑–∞–µ–∑–¥",
                    "–î–µ—Ç—Å–∫–∞—è –∫—Ä–æ–≤–∞—Ç–∫–∞",
                    "–£–≥–ª–æ–≤–æ–π –Ω–æ–º–µ—Ä",
                    "–í–∏–¥ –Ω–∞ –º–æ—Ä–µ",
                    "–¢–∏—Ö—ã–π –Ω–æ–º–µ—Ä"
                ])
            )
            db.add(booking)
        
        print("–°–æ–∑–¥–∞–Ω–æ 20 –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
        
        db.commit()
        print("–ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        
        print("\n –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        print(f"–û—Ç–µ–ª–µ–π: {len(hotels)}")
        print(f"–ö–æ–º–Ω–∞—Ç: {len(rooms)}")
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        print(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: 20")
        
        print("\nüîç –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–µ–ª–µ–π:")
        for hotel in hotels[:3]:
            hotel_rooms = [r for r in rooms if r.hotel_id == hotel.id]
            available_rooms = [r for r in hotel_rooms if r.status == "available"]
            print(f"  {hotel.name} ({hotel.city}) - {len(available_rooms)}/{len(hotel_rooms)} –∫–æ–º–Ω–∞—Ç –¥–æ—Å—Ç—É–ø–Ω–æ")
        
        print("\nüîç –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–Ω–∞—Ç:")
        sample_rooms = random.sample(rooms, 3)
        for room in sample_rooms:
            hotel = next(h for h in hotels if h.id == room.hotel_id)
            print(f"  {hotel.name} - –ö–æ–º–Ω–∞—Ç–∞ {room.room_number} ({room.room_type}) - {room.price_per_night} —Ä—É–±./–Ω–æ—á—å")
        
    except Exception as e:
        db.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()

if __name__ == "__main__":
    create_mock_data()