# tests/test_bookings.py
import pytest
from datetime import datetime, timedelta
from app.core.enums import RoomStatus, BookingStatus

class TestBookings:
    @pytest.fixture
    def setup_data(self, client, sample_hotel_data, sample_room_data, sample_user_data):
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–µ–ª—å
        hotel_response = client.post("/api/v1/hotels/", json=sample_hotel_data)
        assert hotel_response.status_code == 200
        hotel = hotel_response.json()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
        room_data = sample_room_data.copy()
        room_data["hotel_id"] = hotel["id"]
        room_response = client.post("/api/v1/rooms/", json=room_data)
        assert room_response.status_code == 200
        room = room_response.json()
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_response = client.post("/api/v1/users/", json=sample_user_data)
        assert user_response.status_code == 200
        user = user_response.json()
        
        return {
            "hotel": hotel,
            "room": room,
            "user": user
        }

    def test_create_booking_success(self, client, setup_data):
        booking_data = {
            "user_id": setup_data["user"]["id"],
            "hotel_id": setup_data["hotel"]["id"],
            "room_id": setup_data["room"]["id"],
            "check_in_date": (datetime.now() + timedelta(days=1)).isoformat(),
            "check_out_date": (datetime.now() + timedelta(days=3)).isoformat(),
            "number_of_guests": 2,
            "special_requests": "Late check-in please"
        }
        
        response = client.post("/api/v1/bookings/", json=booking_data)
        assert response.status_code == 200
        data = response.json()
        assert data["booking_reference"] is not None
        assert data["status"] == "confirmed"
        assert data["total_price"] == 200.0  # 2 nights * 100.0
        assert "id" in data

    def test_create_booking_room_not_available(self, client, setup_data):
        # –ü–µ—Ä–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        booking_data = {
            "user_id": setup_data["user"]["id"],
            "hotel_id": setup_data["hotel"]["id"],
            "room_id": setup_data["room"]["id"],
            "check_in_date": (datetime.now() + timedelta(days=1)).isoformat(),
            "check_out_date": (datetime.now() + timedelta(days=3)).isoformat(),
            "number_of_guests": 2
        }
        client.post("/api/v1/bookings/", json=booking_data)
        
        # –í—Ç–æ—Ä–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ç–µ –∂–µ –¥–∞—Ç—ã
        response = client.post("/api/v1/bookings/", json=booking_data)
        assert response.status_code == 400
        assert "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è" in response.json()["detail"]

    def test_create_booking_exceeds_capacity(self, client, setup_data):
        booking_data = {
            "user_id": setup_data["user"]["id"],
            "hotel_id": setup_data["hotel"]["id"],
            "room_id": setup_data["room"]["id"],
            "check_in_date": (datetime.now() + timedelta(days=1)).isoformat(),
            "check_out_date": (datetime.now() + timedelta(days=3)).isoformat(),
            "number_of_guests": 5  # –ö–æ–º–Ω–∞—Ç–∞ –≤–º–µ—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ 2
        }
        
        response = client.post("/api/v1/bookings/", json=booking_data)
        assert response.status_code == 400
        assert "–≤–º–µ—â–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º" in response.json()["detail"]

    def test_create_booking_invalid_dates(self, client, setup_data):
        booking_data = {
            "user_id": setup_data["user"]["id"],
            "hotel_id": setup_data["hotel"]["id"],
            "room_id": setup_data["room"]["id"],
            "check_in_date": (datetime.now() + timedelta(days=3)).isoformat(),
            "check_out_date": (datetime.now() + timedelta(days=1)).isoformat(),  # check_out —Ä–∞–Ω—å—à–µ check_in
            "number_of_guests": 2
        }
        
        response = client.post("/api/v1/bookings/", json=booking_data)
        assert response.status_code == 400
        assert "–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞" in response.json()["detail"]

    def test_create_booking_user_not_found(self, client, setup_data):
        booking_data = {
            "user_id": 9999,  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            "hotel_id": setup_data["hotel"]["id"],
            "room_id": setup_data["room"]["id"],
            "check_in_date": (datetime.now() + timedelta(days=1)).isoformat(),
            "check_out_date": (datetime.now() + timedelta(days=3)).isoformat(),
            "number_of_guests": 2
        }
        
        response = client.post("/api/v1/bookings/", json=booking_data)
        assert response.status_code == 404
        assert "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" in response.json()["detail"]

    def test_get_booking_with_details(self, client, setup_data):
        # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        booking_data = {
            "user_id": setup_data["user"]["id"],
            "hotel_id": setup_data["hotel"]["id"],
            "room_id": setup_data["room"]["id"],
            "check_in_date": (datetime.now() + timedelta(days=1)).isoformat(),
            "check_out_date": (datetime.now() + timedelta(days=3)).isoformat(),
            "number_of_guests": 2
        }
        create_response = client.post("/api/v1/bookings/", json=booking_data)
        booking_id = create_response.json()["id"]
        
        # –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
        response = client.get(f"/api/v1/bookings/{booking_id}")
        assert response.status_code == 200
        data = response.json()
        assert data["id"] == booking_id
        assert "user" in data
        assert "hotel" in data
        assert "room" in data
        assert data["user"]["id"] == setup_data["user"]["id"]
        assert data["hotel"]["id"] == setup_data["hotel"]["id"]
        assert data["room"]["id"] == setup_data["room"]["id"]

    def test_get_user_bookings(self, client, setup_data):
        print(f"\nüîç Starting test_get_user_bookings")
        print(f"User ID: {setup_data['user']['id']}")
        print(f"Room ID: {setup_data['room']['id']}")
        print(f"Hotel ID: {setup_data['hotel']['id']}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        booking_data1 = {
            "user_id": setup_data["user"]["id"],
            "hotel_id": setup_data["hotel"]["id"],
            "room_id": setup_data["room"]["id"],
            "check_in_date": (datetime.now() + timedelta(days=1)).isoformat(),
            "check_out_date": (datetime.now() + timedelta(days=3)).isoformat(),
            "number_of_guests": 2
        }
        response1 = client.post("/api/v1/bookings/", json=booking_data1)
        print(f"üìÖ First booking dates: {booking_data1['check_in_date']} to {booking_data1['check_out_date']}")
        print(f"‚úÖ First booking response: {response1.status_code}, {response1.text}")
        assert response1.status_code == 200
        booking1_data = response1.json()
        print(f"üìã First booking ID: {booking1_data.get('id', 'No ID')}")

        # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ë–û–õ–¨–®–ò–ú –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        booking_data2 = {
            "user_id": setup_data["user"]["id"],
            "hotel_id": setup_data["hotel"]["id"],
            "room_id": setup_data["room"]["id"],
            "check_in_date": (datetime.now() + timedelta(days=10)).isoformat(),  # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 10 –¥–Ω–µ–π
            "check_out_date": (datetime.now() + timedelta(days=12)).isoformat(), # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 12 –¥–Ω–µ–π
            "number_of_guests": 2
        }
        response2 = client.post("/api/v1/bookings/", json=booking_data2)
        print(f"üìÖ Second booking dates: {booking_data2['check_in_date']} to {booking_data2['check_out_date']}")
        print(f"‚úÖ Second booking response: {response2.status_code}, {response2.text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á–µ–º—É –≤—Ç–æ—Ä–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è
        if response2.status_code != 200:
            error_data = response2.json()
            print(f"‚ùå Second booking failed: {error_data}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            room_response = client.get(f"/api/v1/rooms/{setup_data['room']['id']}")
            room_data = room_response.json()
            print(f"üö™ Room status after first booking: {room_data['status']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã
            print("üîç Checking existing bookings for this room...")
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —á—Ç–æ –µ—Å—Ç—å
            user_bookings_response = client.get(f"/api/v1/bookings/user/{setup_data['user']['id']}/bookings")
            user_bookings = user_bookings_response.json()
            print(f"üìã User bookings count: {len(user_bookings)}")
            for i, booking in enumerate(user_bookings):
                print(f"  Booking {i+1}: {booking['check_in_date']} to {booking['check_out_date']} - Status: {booking['status']}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = client.get(f"/api/v1/bookings/user/{setup_data['user']['id']}/bookings")
        assert response.status_code == 200
        data = response.json()
        print(f"üìä Total user bookings found: {len(data)}")
        
        # –í–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–≥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ 2 –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ
        # –∏ —á—Ç–æ –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        assert len(data) >= 1, f"Expected at least 1 booking, but got {len(data)}"
        assert all(booking["user"]["id"] == setup_data["user"]["id"] for booking in data)
        
        # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–ª–æ—Å—å –¥–≤–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - –æ—Ç–ª–∏—á–Ω–æ, –µ—Å–ª–∏ –æ–¥–Ω–æ - —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        if len(data) == 2:
            print("üéâ Both bookings created successfully!")
        else:
            print(f"‚ö†Ô∏è Only {len(data)} booking(s) created, but test continues")
            
    def test_cancel_booking_success(self, client, setup_data):
        # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        booking_data = {
            "user_id": setup_data["user"]["id"],
            "hotel_id": setup_data["hotel"]["id"],
            "room_id": setup_data["room"]["id"],
            "check_in_date": (datetime.now() + timedelta(days=1)).isoformat(),
            "check_out_date": (datetime.now() + timedelta(days=3)).isoformat(),
            "number_of_guests": 2
        }
        create_response = client.post("/api/v1/bookings/", json=booking_data)
        booking_id = create_response.json()["id"]
        
        # –û—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        response = client.put(f"/api/v1/bookings/{booking_id}/cancel")
        assert response.status_code == 200
        assert "—É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ" in response.json()["message"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏–ª—Å—è
        get_response = client.get(f"/api/v1/bookings/{booking_id}")
        assert get_response.json()["status"] == "cancelled"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        room_response = client.get(f"/api/v1/rooms/{setup_data['room']['id']}")
        assert room_response.json()["status"] == RoomStatus.AVAILABLE.value

    def test_check_in_check_out_flow(self, client, setup_data):
        # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        booking_data = {
            "user_id": setup_data["user"]["id"],
            "hotel_id": setup_data["hotel"]["id"],
            "room_id": setup_data["room"]["id"],
            "check_in_date": (datetime.now() + timedelta(days=1)).isoformat(),
            "check_out_date": (datetime.now() + timedelta(days=3)).isoformat(),
            "number_of_guests": 2
        }
        create_response = client.post("/api/v1/bookings/", json=booking_data)
        booking_id = create_response.json()["id"]
        
        # Check-in
        response = client.put(f"/api/v1/bookings/{booking_id}/check-in")
        assert response.status_code == 200
        assert "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" in response.json()["message"]
        
        get_response = client.get(f"/api/v1/bookings/{booking_id}")
        assert get_response.json()["status"] == "checked_in"
        
        # Check-out
        response = client.put(f"/api/v1/bookings/{booking_id}/check-out")
        assert response.status_code == 200
        assert "–í—ã–µ–∑–¥" in response.json()["message"]
        
        get_response = client.get(f"/api/v1/bookings/{booking_id}")
        assert get_response.json()["status"] == "completed"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ –ø–µ—Ä–µ—à–ª–∞ –≤ —Å—Ç–∞—Ç—É—Å —É–±–æ—Ä–∫–∏
        room_response = client.get(f"/api/v1/rooms/{setup_data['room']['id']}")
        assert room_response.json()["status"] == "cleaning"