function renderBookings() {
    const container = document.getElementById('bookings-list');
    
    if (!app.bookings.length) {
        container.innerHTML = '<p>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
        return;
    }

    container.innerHTML = app.bookings.map(booking => {
        const user = app.users.find(u => u.id === booking.user_id);
        const hotel = app.hotels.find(h => h.id === booking.hotel_id);
        const room = app.rooms.find(r => r.id === booking.room_id);
        
        return `
            <div class="card">
                <h3>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #${booking.booking_reference}</h3>
                <p><strong>–ì–æ—Å—Ç—å:</strong> ${user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ${user?.last_name || ''}</p>
                <p><strong>–û—Ç–µ–ª—å:</strong> ${hotel?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
                <p><strong>–ö–æ–º–Ω–∞—Ç–∞:</strong> ${room?.room_number || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
                <p><strong>–ó–∞–µ–∑–¥:</strong> ${UIUtils.formatDateTime(booking.check_in_date)}</p>
                <p><strong>–í—ã–µ–∑–¥:</strong> ${UIUtils.formatDateTime(booking.check_out_date)}</p>
                <p><strong>–ì–æ—Å—Ç–µ–π:</strong> ${booking.number_of_guests}</p>
                <p><strong>–û–±—â–∞—è —Ü–µ–Ω–∞:</strong> ${booking.total_price} —Ä—É–±.</p>
                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${getBookingStatusText(booking.status)}</p>
                ${booking.special_requests ? `<p><strong>–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:</strong> ${booking.special_requests}</p>` : ''}
                
                <div class="card-actions">
                    <button class="btn btn-success" onclick="checkInBooking(${booking.id})" ${booking.status !== 'confirmed' ? 'disabled' : ''}>‚úÖ –ó–∞–µ–∑–¥</button>
                    <button class="btn btn-warning" onclick="checkOutBooking(${booking.id})" ${booking.status !== 'checked_in' ? 'disabled' : ''}>üèÅ –í—ã–µ–∑–¥</button>
                    <button class="btn btn-danger" onclick="cancelBooking(${booking.id})" ${!['confirmed', 'checked_in'].includes(booking.status) ? 'disabled' : ''}>‚ùå –û—Ç–º–µ–Ω–∏—Ç—å</button>
                    <button class="btn" onclick="deleteBooking(${booking.id})" style="background-color: #6c757d; color: white;">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
        `;
    }).join('');
}

function getBookingStatusText(status) {
    const statusMap = {
        'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–æ',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
        'checked_in': '–ó–∞—Å–µ–ª–µ–Ω',
        'checked_out': '–í—ã—Å–µ–ª–µ–Ω'
    };
    return statusMap[status] || status;
}

function showBookingForm() {
    const usersOptions = app.users.map(user => 
        `<option value="${user.id}">${user.first_name} ${user.last_name} (${user.email})</option>`
    ).join('');
    
    const hotelsOptions = app.hotels.map(hotel => 
        `<option value="${hotel.id}">${hotel.name} - ${hotel.city}</option>`
    ).join('');
    
    const availableRooms = app.rooms.filter(room => room.status === 'available');
    const roomsOptions = availableRooms.map(room => {
        const hotel = app.hotels.find(h => h.id === room.hotel_id);
        return `<option value="${room.id}">–ö–æ–º–Ω–∞—Ç–∞ ${room.room_number} (${hotel?.name}) - ${room.price_per_night} —Ä—É–±./–Ω–æ—á—å</option>`;
    }).join('');
    
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const checkinDefault = tomorrow.toISOString().slice(0, 16);
    
    const dayAfterTomorrow = new Date();
    dayAfterTomorrow.setDate(dayAfterTomorrow.getDate() + 3);
    const checkoutDefault = dayAfterTomorrow.toISOString().slice(0, 16);
    
    const content = `
        <form id="booking-form">
            <div class="form-group">
                <label>–ì–æ—Å—Ç—å:</label>
                <select name="user_id" required>
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Å—Ç—è</option>
                    ${usersOptions}
                </select>
            </div>
            <div class="form-group">
                <label>–û—Ç–µ–ª—å:</label>
                <select name="hotel_id" required onchange="updateAvailableRooms(this.value)">
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–µ–ª—å</option>
                    ${hotelsOptions}
                </select>
            </div>
            <div class="form-group">
                <label>–ö–æ–º–Ω–∞—Ç–∞:</label>
                <select name="room_id" required id="room-select">
                    <option value="">–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–µ–ª—å</option>
                    ${roomsOptions}
                </select>
            </div>
            <div class="form-row">
                <div class="form-group">
                    <label>–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞:</label>
                    <input type="datetime-local" name="check_in_date" value="${checkinDefault}" required>
                </div>
                <div class="form-group">
                    <label>–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞:</label>
                    <input type="datetime-local" name="check_out_date" value="${checkoutDefault}" required>
                </div>
            </div>
            <div class="form-group">
                <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:</label>
                <input type="number" name="number_of_guests" value="2" min="1" required>
            </div>
            <div class="form-group">
                <label>–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:</label>
                <textarea name="special_requests" placeholder="–ü–æ–∑–¥–Ω–∏–π –∑–∞–µ–∑–¥, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª–æ—Ç–µ–Ω—Ü–∞..."></textarea>
            </div>
            <div class="card-actions">
                <button type="button" class="btn btn-primary" onclick="saveBooking()">–°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</button>
                <button type="button" class="btn" onclick="closeModal()">–û—Ç–º–µ–Ω–∞</button>
            </div>
        </form>
    `;
    
    showModal('–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', content);
}

function updateAvailableRooms(hotelId) {
    const roomSelect = document.getElementById('room-select');
    const availableRooms = app.rooms.filter(room => 
        room.hotel_id == hotelId && room.status === 'available'
    );
    
    roomSelect.innerHTML = availableRooms.map(room => 
        `<option value="${room.id}">–ö–æ–º–Ω–∞—Ç–∞ ${room.room_number} - ${room.price_per_night} —Ä—É–±./–Ω–æ—á—å (–≤–º–µ—â–∞–µ—Ç: ${room.capacity})</option>`
    ).join('') || '<option value="">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç</option>';
}

async function saveBooking() {
    try {
        const formData = FormUtils.getFormData('booking-form');
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
        formData.user_id = parseInt(formData.user_id);
        formData.hotel_id = parseInt(formData.hotel_id);
        formData.room_id = parseInt(formData.room_id);
        formData.number_of_guests = parseInt(formData.number_of_guests);
        
        await ApiClient.post('/bookings/', formData);
        UIUtils.showMessage('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ');
        closeModal();
        await app.loadBookings();
    } catch (error) {
        UIUtils.showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
    }
}

async function checkInBooking(bookingId) {
    try {
        await ApiClient.put(`/bookings/${bookingId}/check-in`);
        UIUtils.showMessage('–ó–∞–µ–∑–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
        await app.loadBookings();
    } catch (error) {
        UIUtils.showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–µ–∑–¥–∞', 'error');
    }
}

async function checkOutBooking(bookingId) {
    try {
        await ApiClient.put(`/bookings/${bookingId}/check-out`);
        UIUtils.showMessage('–í—ã–µ–∑–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
        await app.loadBookings();
    } catch (error) {
        UIUtils.showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–µ–∑–¥–∞', 'error');
    }
}

async function cancelBooking(bookingId) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?')) {
        try {
            await ApiClient.put(`/bookings/${bookingId}/cancel`);
            UIUtils.showMessage('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ');
            await app.loadBookings();
        } catch (error) {
            UIUtils.showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
        }
    }
}

async function searchRooms() {
    const city = document.getElementById('search-city').value;
    const checkin = document.getElementById('search-checkin').value;
    const checkout = document.getElementById('search-checkout').value;
    const guests = document.getElementById('search-guests').value;
    
    if (!city || !checkin || !checkout) {
        UIUtils.showMessage('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞', 'error');
        return;
    }
    
    try {
        const params = new URLSearchParams({
            city: city,
            check_in: checkin,
            check_out: checkout,
            guests: guests
        });
        
        const results = await ApiClient.get(`/rooms/search/available?${params}`);
        displaySearchResults(results);
    } catch (error) {
        UIUtils.showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–º–Ω–∞—Ç', 'error');
    }
}

function displaySearchResults(rooms) {
    const container = document.getElementById('search-results');
    
    if (!rooms.length) {
        container.innerHTML = '<p>–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>';
        return;
    }
    
    container.innerHTML = rooms.map(room => {
        const hotel = app.hotels.find(h => h.id === room.hotel_id);
        
        return `
            <div class="card">
                <h3>–ö–æ–º–Ω–∞—Ç–∞ ${room.room_number}</h3>
                <p><strong>–û—Ç–µ–ª—å:</strong> ${hotel?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
                <p><strong>–ê–¥—Ä–µ—Å:</strong> ${hotel?.address || ''}, ${hotel?.city || ''}</p>
                <p><strong>–¢–∏–ø:</strong> ${room.room_type}</p>
                <p><strong>–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å:</strong> ${room.price_per_night} —Ä—É–±.</p>
                <p><strong>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</strong> ${room.capacity} –≥–æ—Å—Ç–µ–π</p>
                <p><strong>–≠—Ç–∞–∂:</strong> ${room.floor}</p>
                ${room.description ? `<p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${room.description}</p>` : ''}
                ${room.amenities ? `<p><strong>–£–¥–æ–±—Å—Ç–≤–∞:</strong> ${room.amenities}</p>` : ''}
                
                <div class="card-actions">
                    <button class="btn btn-primary" onclick="bookThisRoom(${room.id})">–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å</button>
                </div>
            </div>
        `;
    }).join('');
}

function bookThisRoom(roomId) {
    const room = app.rooms.find(r => r.id === roomId);
    if (room) {
        showBookingForm();
        setTimeout(() => {
            document.querySelector('select[name="hotel_id"]').value = room.hotel_id;
            updateAvailableRooms(room.hotel_id);
            setTimeout(() => {
                document.querySelector('select[name="room_id"]').value = roomId;
            }, 100);
        }, 100);
    }
}

async function deleteBooking(booking_id) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?')) {
        try {
            await ApiClient.delete(`/bookings/${booking_id}`);
            UIUtils.showMessage('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ');
            await app.loadBookings();
        } catch (error) {
            UIUtils.showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
        }
    }
}